/**
 * ■概要
 * 最初に紹介するのは、バブルソートと呼ばれるソートアルゴリズムです。バブルとは、日本語で泡を意味する言葉です。
 * ではいったい、なぜ「泡」と呼ばれるのでしょうか。それは、このアルゴリズムの仕組みに由来しています。
 * まずは、昇順でのソートでその仕組みを見てみましょう。
 * リストの先頭から、要素を取り出す。（これを、要素①とする）
 * 次の要素（要素②とする）と、要素①を比較する。
 * 要素①が、要素②より大きければ、値を交換する。
 * 要素②の次の要素を、新たに要素②とし、2.に戻る。
 * 末端まで処理が終われば、新たに要素①を、次の要素に、さらにその次を要素②として、2.に戻る
 * 要素①が、末端より一つ前まで終了したら、処理を終了する。
 * 以上が、バブルソートのアルゴリズムです。バブルソートと呼ばれるのは、小さい要素が浮かびあがってくるように見えることに由来します。(図5-2.参照)
 *
 * ■リットとデメリット
 * バブルソートのメリットは、なんと言っても実装の容易さです。さまざまなソートアルゴリズムの中では、実装がもっとも簡単なアルゴリズムの一つといえます。
 * それに対し、デメリットは、処理のステップ数の多さです。要素の個数をnとすると、必ず n(n - 1)/2 回のスキャンが必要になります。
 * つまり、リストの要素が1000あれば、499500回のスキャンが必要になるのです。
 * このようなことから、バブルソートは、要素数が少ない簡単なリストで用いることが好ましいアルゴリズムです。
 */

const arry = [17, 4, 64, 12, 6, 13, 9];

//調べる範囲の開始位置を１つずつ後ろへ移動するfor文
for (let i = 0; i < arry.length; i++) {
  //後ろから前に向かって小さい値を浮かび上がらせるfor文
  for (let j = arry.length - 1; j > i; j--) {
    //隣りあう２つの値を比べて、後ろが小さければ交換する
    if (arry[j] < arry[j - 1]) {
      const comparResultTmp = arry[j - 1];
      arry[j - 1] = arry[j];
      arry[j] = comparResultTmp;
    }
    console.log(arry);
  }
}

console.log(arry);
